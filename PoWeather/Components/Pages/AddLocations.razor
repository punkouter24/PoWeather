@page "/AddLocations"
@using PoWeather.Services
@using PoWeather.Data
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@inject UserManager<ApplicationUser> UserManager
@inject BlobStorageService BlobStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div style="padding: 16px; margin-top: 20px;">
                <h5 style="margin-bottom: 20px;">Manage Your Locations</h5>

                <div>
                    <input type="text" @bind="newLocation" />
                    <button @onclick="AddLocation">Add</button>
                </div>

                <div style="max-width: 300px; margin: auto;">
                    @foreach (var location in userLocations)
                    {
                        <div
                            style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                            <span>@location</span>
                            <button @onclick="() => RemoveLocation(location)">Remove</button>
                        </div>
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <p>You are not logged in. Please <a href="Account/Login">Login</a>.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code {
    private string newLocation;
    private List<string> userLocations = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userLocations = await BlobStorageService.GetLocationsAsync(user.Identity.Name);
        }
    }

    private async Task AddLocation()
    {
        Console.WriteLine("AddLocation");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!string.IsNullOrWhiteSpace(newLocation) && user.Identity.IsAuthenticated)
        {
            userLocations.Add(newLocation);
            await BlobStorageService.SaveLocationsAsync(user.Identity.Name, userLocations);
            newLocation = string.Empty;
        }
    }

    private async Task RemoveLocation(string location)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated && userLocations.Contains(location))
        {
            userLocations.Remove(location);
            await BlobStorageService.SaveLocationsAsync(user.Identity.Name, userLocations);
        }
    }
}
