@page "/"
@rendermode InteractiveServer
@using PoWeather.Data
@using PoWeather.Services
@using Microsoft.AspNetCore.Identity
@inject WeatherService WeatherService
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BlobStorageService BlobStorageService

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
    }

    h3 {
        color: #333;
        text-align: center;
        margin-top: 50px;
    }

    p {
        color: #666;
    }

    a {
        color: #007bff;
        text-decoration: none;
    }

    a:hover {
        color: #0056b3;
    }

    .weather-grid {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        gap: 20px;
        margin: 50px 0;
    }
</style>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <h3>Weather Dashboard</h3>
            @if (userLocations == null)
            {
                <p><em>Loading...</em></p> <!-- Consider replacing with a spinner -->
            }
            else if (!userLocations.Any())
            {
                <p>No locations found. Add locations in your profile.</p>
            }
            else
            {
                <div class="weather-grid">
                    <WeatherGrid Locations="@userLocations" />
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <p>You are not logged in. Please <a href="Account/Login">Login</a>.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<string> userLocations = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userLocations = await BlobStorageService.GetLocationsAsync(user.Identity.Name);
        }
    }
}
